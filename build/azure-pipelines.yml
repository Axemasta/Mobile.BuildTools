trigger:
  batch: true
  branches:
    include:
    - master
    - v*.*
  paths:
    exclude:
      - theme/*
      - docs/*
      - LICENSE
      - mkdocs.yml
      - ReadMe.md

pr:
  branches:
    include:
    - master
  paths:
    exclude:
      - theme/*
      - docs/*
      - LICENSE
      - mkdocs.yml
      - ReadMe.md

name: $(Build.BuildId)

variables:
- name: WindowsAgent
  value: windows-latest
- name: MacAgent
  value: macOS-latest
- name: BuildConfiguration
  value: 'Release'
- name: BuildPlatform
  value: 'Any CPU'
- name: TargetSolution
  value: 'Mobile.BuildTools.sln'
- name: SampleString
  value: 'Sample String'
- name: SampleInt
  value: '1'
- name: SampleDouble
  value: '2.1'
- name: SampleBool
  value: 'true'
- group: 'Code Signing'
- group: 'AppSigning'
- group: 'GitHubRelease'

stages:
- stage: Build
  displayName: Run Build
  jobs:
  - template: jobs/build-library.yml
    parameters:
      solution: Mobile.BuildTools.sln

- stage: Test
  displayName: Run Tests
  dependsOn: Build
  jobs:
  - template: jobs/integration-tests.yml
    parameters:
      solution: E2E/E2E.sln
      vmImage: $(WindowsAgent)
      jobName: IntegrationTestsWin
      displayName: Integration Tests (Windows)

  - template: jobs/integration-tests.yml
    parameters:
      solution: E2E/E2E.sln
      vmImage: $(MacAgent)
      jobName: IntegrationTestsMac
      displayName: Integration Tests (Mac)
      runBoots: true

  # - template: jobs/android.yml
  #   parameters:
  #     solution: E2EApp.sln
  #     baseSolutionDirectory: E2E/E2EApp
  #     appRootDirectory: E2E/E2EApp/E2EApp.Android
  #     csprojName: E2EApp.Android.csproj

  # - template: jobs/ios.yml
  #   parameters:
  #     solution: E2EApp.sln
  #     baseSolutionDirectory: E2E/E2EApp
  #     appRootDirectory: E2E/E2EApp/E2EApp.iOS
  #     csprojName: E2EApp.iOS.csproj

- stage: CIRelease
  displayName: Deploy NuGet Artifacts
  dependsOn: Test
  condition: and(succeeded(), or(eq(variables['Build.SourceBranch'], 'refs/heads/master'), startsWith(variables['Build.SourceBranch'], 'refs/heads/v')))
  jobs:
  - deployment: SponsorConnect
    displayName: Sponsor Connect
    environment: SponsorConnect
    strategy:
      runOnce:
        deploy:
          steps:
          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'SponsorConnect'

- stage: Release
  displayName: Deploy Release
  dependsOn: CIRelease
  condition: and(succeeded(), startsWith(variables['Build.SourceBranch'], 'refs/heads/v'))
  jobs:
  - deployment: NuGet
    displayName: NuGet.org
    environment: NuGet
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
            clean: true
            submodules: false

          - powershell: build/Process-Release.ps1
            displayName: Process Artifacts for Release

          - task: GitHubRelease@1
            displayName: 'Create GitHub Release'
            inputs:
              gitHubConnection: 'github.com'
              title: '$(ReleaseDisplayName)'
              tag: 'v$(VersionName)'
              isPreRelease: $(IsPreview)
              assets: |
               $(Pipeline.Workspace)/**/*.nupkg
               $(Pipeline.Workspace)/**/*.snupkg
              isDraft: true
              addChangeLog: true

          - task: NuGetCommand@2
            displayName: NuGet Push
            inputs:
              command: push
              packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg;$(Pipeline.Workspace)/**/*.snupkg'
              nuGetFeedType: external
              publishFeedCredentials: 'NuGet'


